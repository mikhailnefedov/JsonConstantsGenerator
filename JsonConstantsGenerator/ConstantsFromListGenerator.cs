using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using JsonConstantsGenerator.Attributes;
using JsonConstantsGenerator.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace JsonConstantsGenerator;

/// <summary>
///
/// </summary>
[Generator]
public class ConstantsFromListGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classes = context.SyntaxProvider.ForAttributeWithMetadataName(
            typeof(GenerateConstantsFromList).FullName!,
            predicate: (_, _) => true,
            transform: static (context, _) => GetAttributeData(context));
        
        var additionalFiles =
            context.AdditionalTextsProvider
                .Where(file => file.Path.EndsWith(".json"))
                .Select((file, _) => 
                    new { file.Path, Content = file.GetText()?.ToString() ?? string.Empty });
        
        var combinedData = classes.Combine(additionalFiles.Collect());
        
        context.RegisterSourceOutput(combinedData, (sourceContext, source) =>
        {
            var attribute = source.Left;
            var matchingJson = source.Right.FirstOrDefault(f => f.Path.EndsWith(attribute.FileName!));
            
            if (matchingJson is not null)
            {
                var properties = GetPropertiesFromContent(matchingJson.Content, attribute.SelectorField);
                
                /**
                var sb = new StringBuilder();
                sb.Append("""
                          // <auto-generated/>
                          
                          using System;
                          
                          namespace Test;
                          
                          """);

                sb.AppendLine($"partial class {attribute.ClassName}2");
                sb.AppendLine("{");

                foreach (var property in properties)
                {
                    sb.Append($"""public string {property.PropertyName} => "Test";""");
                    //sb.AppendLine($"public const string {property.PropertyName} => \"{property.PropertyValue}\";");
                    sb.AppendLine("");
                }
                
                sb.AppendLine("}");
                **/
                
                var code = $$"""
                             // <auto-generated/>

                             using System;
                             using System.Collections.Generic;

                             namespace Test;

                             partial class ExampleClass
                             {
                                 
                             }

                             """;
                
                sourceContext.AddSource($"ExampleClass.g.cs", SourceText.From(code, Encoding.UTF8));
            }
        });
    }

    private static GenerateConstantsFromList GetAttributeData(GeneratorAttributeSyntaxContext context)
    {
        GenerateConstantsFromList attribute = new();

        var targetSymbolName = context.TargetSymbol.Name;
        
        var arguments = context.Attributes.Single().NamedArguments
            .ToDictionary(arg => arg.Key, arg => arg.Value);

        if (arguments.TryGetValue(nameof(GenerateConstantsFromList.FileName), out var fileName))
        {
            attribute.FileName = fileName.Value as string;
        }
        else
        {
            attribute.FileName = $"{targetSymbolName}.json";
        }
        
        if (arguments.TryGetValue(nameof(GenerateConstantsFromList.ClassName), out var className))
        {
            attribute.ClassName = className.Value as string;
        }
        else
        {
            attribute.ClassName = targetSymbolName;
        }
        
        if (arguments.TryGetValue(nameof(GenerateConstantsFromList.SelectorField), out var selectorFieldName))
        {
            attribute.SelectorField = selectorFieldName.Value as string;
        }

        return attribute;
    }

    private static List<(string PropertyName, string PropertyValue)> GetPropertiesFromContent(string content, string? selectorField)
    {
        if (selectorField is null)
        {
            var values = JsonSerializer.Deserialize<List<string>>(content);
            return (values ?? [])
                .Select(value => (PropertyName: StringNormalization.RemoveDiacritics(value), PropertyValue: value))
                .ToList();
        }
        
        // harder part deserialization and using selectorField
        
        return [];
    }
}